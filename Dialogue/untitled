


if (`window -exists "AudioGUI"`) deleteUI "AudioGUI";
window -title "Audio Visualizer" -widthHeight 500 600 "AudioGUI";
if (`windowPref -exists AudioGUI`) windowPref -remove AudioGUI;
 formLayout -numberOfDivisions 100 myForm;

          
          button -label "Create" -command "makeObj()" myBtn1; 
          
          floatSliderGrp -label "Particle Speed" -field true 
          -minValue 20.0 -maxValue 100.0
          -value 40
          speedSlider;
          
          floatSliderGrp -label "Particle Density" -field true 
          -minValue 100.0 -maxValue 2000.0
          -value 800
          densitySlider;
          
          floatSliderGrp -label "Particle Lifespan" -field true 
          -minValue 0.1 -maxValue 2.0
          -value 0.8
          lifespanSlider;
          
          floatSliderGrp -label "Gravity (Magnitude)" -field true 
          -minValue 5.0 -maxValue 100.0
          -value 50
          gravitySlider;
          
          floatSliderGrp -label "Audio Threshold 0" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider0;
          
          floatSliderGrp -label "Audio Threshold 1" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider1;
          
          floatSliderGrp -label "Audio Threshold 2" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider2;
          
          floatSliderGrp -label "Audio Threshold 3" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider3;
          
          floatSliderGrp -label "Audio Threshold 4" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider4;
          
          floatSliderGrp -label "Audio Threshold 5" -field true 
          -minValue 0.0 -maxValue 10.0
          -value 2.4
          thresholdSlider5;
          
          floatSliderGrp -label "Audio Scale 0" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 10
          scaleSlider0;
          
          floatSliderGrp -label "Audio Scale 1" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 12
          scaleSlider1;
          
          floatSliderGrp -label "Audio Scale 2" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 10
          scaleSlider2;
          
          floatSliderGrp -label "Audio Scale 3" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 10
          scaleSlider3;
          
          floatSliderGrp -label "Audio Scale 4" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 9
          scaleSlider4;
          
          floatSliderGrp -label "Audio Scale 5" -field true 
          -minValue 1.0 -maxValue 20.0
          -value 12
          scaleSlider5;
          
          floatSliderGrp -label "Audio Sample Size 0" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 100
          sampleSizeSlider0;
          
          floatSliderGrp -label "Audio Sample Size 1" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 20
          sampleSizeSlider1;
          
          floatSliderGrp -label "Audio Sample Size 2" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 10
          sampleSizeSlider2;
          
          floatSliderGrp -label "Audio Sample Size 3" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 3
          sampleSizeSlider3;
          
          floatSliderGrp -label "Audio Sample Size 4" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 3
          sampleSizeSlider4;
          
          floatSliderGrp -label "Audio Sample Size 5" -field true 
          -minValue 0.0 -maxValue 150.0
          -value 100
          sampleSizeSlider5;
     
      formLayout -edit
          -attachForm myBtn1 "bottom" 30
          -attachForm myBtn1 "left" 240 
         
          -attachForm speedSlider "top" 20
          -attachForm densitySlider "top" 45
          -attachForm lifespanSlider "top" 70
          -attachForm gravitySlider "top" 95
          -attachForm thresholdSlider0 "top" 120
          -attachForm thresholdSlider1 "top" 140
          -attachForm thresholdSlider2 "top" 160
          -attachForm thresholdSlider3 "top" 180
          -attachForm thresholdSlider4 "top" 200
          -attachForm thresholdSlider5 "top" 220
          -attachForm scaleSlider0 "top" 245
          -attachForm scaleSlider1 "top" 265
          -attachForm scaleSlider2 "top" 285
          -attachForm scaleSlider3 "top" 305
          -attachForm scaleSlider4 "top" 325
          -attachForm scaleSlider5 "top" 345
          -attachForm sampleSizeSlider0 "top" 370
          -attachForm sampleSizeSlider1 "top" 390
          -attachForm sampleSizeSlider2 "top" 410
          -attachForm sampleSizeSlider3 "top" 430
          -attachForm sampleSizeSlider4 "top" 450
          -attachForm sampleSizeSlider5 "top" 470
          
          
     myForm; 



showWindow AudioGUI;









proc makeObj() {
    
select -all;
delete;
currentTime 1 ;

int $numBars=11; //number of bars
float $space=1.4; //bar spacing
float $spread = 0.020; //spread of particles
string $audioPath = "/Users/caseyhanley/Desktop/Stop.mp3";

//load in audio for the user
doSoundImportArgList ("1", {$audioPath,"0.0"});


int $numChannels; //number of different audio channels
$numChannels=(($numBars-1)/2)+1;
int $midBar = $numChannels - 1; //index of the middle bar to make my life easier
int $i;


//get info from GUI later
float $speed = `floatSliderGrp -query -value "speedSlider"`;
float $density = `floatSliderGrp -query -value "densitySlider"`;
float $lifespan = `floatSliderGrp -query -value "lifespanSlider"`;
float $gValue = `floatSliderGrp -query -value "gravitySlider"`;

float $condition2change[];
for($i=0;$i<$numChannels;$i++){
    $condition2change[$i]=`floatSliderGrp -query -value ("thresholdSlider"+$i)`;
}


float $scale[];
float $sampleSize[];
for($i=0;$i<$numChannels;$i++){
    $scale[$i] = `floatSliderGrp -query -value ("scaleSlider"+$i)`;
    $sampleSize[$i] = `floatSliderGrp -query -value ("sampleSizeSlider"+$i)`;
}


//create audio channels for pairs of bars (and the middle bar)
for ($i=0; $i<$numChannels; $i++){
    createNode audioWave -name ("Audio"+$i);
    setAttr -type "string" ("Audio"+$i+".audio") $audioPath; 
    connectAttr time1.outTime ("Audio"+$i+".input");
    createNode "distanceBetween" -name ("DistBet"+$i);
    createNode "condition" -name ("Condition"+$i);
    
    //connect the logic for various audio channel outputs using conditions
    connectAttr ("Audio"+$i+".output") ("DistBet"+$i+".point1X");
    connectAttr ("DistBet"+$i+".distance") ("Condition"+$i+".firstTerm");
    setAttr ("DistBet"+$i+".point2X") 2.5;

}

//create user-specified number of bars
for ($i=0; $i<$numBars; $i++){
    polyCube -name ("Bar"+$i);
    setAttr("Bar"+$i+".translateX", $i*$space);
    setAttr("Bar"+$i+".scaleX", 1.3);
    setAttr("Bar"+$i+".scaleZ", 1.3);
}

//create emitters (with particles) for each bar
for ($i=0; $i<$numBars; $i++){
    emitter -name ("Emitter"+$i)
            -position ($i*$space) 0 0 
            -type direction;
    setAttr ("Emitter"+$i+".spread", $spread);
    setAttr ("Emitter"+$i+".rotateZ", 90);
    particle -name ("Particle"+$i);
    connectDynamic -em ("Emitter"+$i) ("Particle"+$i);
    
    //change particle's lifespan
    setAttr ("Particle"+$i+"Shape.lifespanMode") 1;
    setAttr ("Particle"+$i+"Shape.lifespan") $lifespan;
    
    //change particle shape to sphere
    setAttr ("Particle"+$i+"Shape.particleRenderType") 1;
    //setAttr ("Particle"+$i+"Shape.pointSize") 1;
}

//GRAVITY
gravity -name "gField" -magnitude $gValue;
for ($i=0; $i<$numBars; $i++){
    connectDynamic -f "gField" ("Particle"+$i);

}

for ($i=0; $i<$numChannels; $i++){
    setAttr ("Condition"+$i+".operation") 2;
    setAttr ("Condition"+$i+".secondTerm") $condition2change[$i];
    setAttr ("Condition"+$i+".colorIfTrueR") $density;
    setAttr ("Condition"+$i+".colorIfFalseR") 0;
}
setAttr ("Condition"+$midBar+".secondTerm") $condition2change[0]; //set middle bar manually

//connect output of conditional statements to the emitter rates
for ($i=1; $i<$numChannels; $i++){
    int $iBar1 = $midBar+$i; //index of first bar
    int $iBar2 = $midBar-$i; //index of second bar
    connectAttr ("Condition"+$i+".outColorR") ("Emitter"+$iBar1+".rate");
    connectAttr ("Condition"+$i+".outColorR") ("Emitter"+$iBar2+".rate");
    
    if($i==$midBar){
        connectAttr ("Condition"+$i+".outColorR") ("Emitter"+$i+".rate");
    }
}

//connect output of audio waves to the height of the bars
for ($i=1; $i<$numChannels; $i++){
    int $iBar1 = $midBar+$i; //index of first bar
    int $iBar2 = $midBar-$i; //index of second bar
    connectAttr ("Audio"+($i-1)+".output") ("Bar"+$iBar1+".scaleY");
    connectAttr ("Audio"+($i-1)+".output") ("Bar"+$iBar2+".scaleY");    
    
    if($i==$midBar){
        connectAttr ("Audio"+$i+".output") ("Bar"+$i+".scaleY");
    }
}

//set emitter speed
for ($i=1; $i<$numChannels; $i++){
    int $iBar1 = $midBar+$i; //index of first bar
    int $iBar2 = $midBar-$i; //index of second bar
    setAttr ("Emitter"+$iBar1+".speed") $speed;
    setAttr ("Emitter"+$iBar2+".speed") $speed;
    if($i==$midBar){
        setAttr ("Emitter"+$i+".speed") $speed;
    }
}

//Audio Settings (sample size and scale)
for($i=0; $i<$numChannels; $i++){
    setAttr ("Audio"+$i+".scale") $scale[$i];
    setAttr ("Audio"+$i+".sampleSize") $sampleSize[$i];
}


//////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////
//                                 COLORS
//////////////////////////////////////////////////////////////////////

select -r Particle10 ;
select -tgl Particle0 ;
shadingNode -asShader lambert;
// Result: lambert2 // 
sets -renderable true -noSurfaceShader true -empty -name lambert2SG;
// Result: lambert2SG // 
connectAttr -f lambert2.outColor lambert2SG.surfaceShader;
// Result: Connected lambert2.outColor to lambert2SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert2 "Particle10 Particle0";
sets -e -forceElement lambert2SG;
// Warning: line 1: Cannot add the following items to the set since the set has restrictions on membership: gField // 
// Result: lambert2SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert2.color" -type double3 0.5 0.5 0.5 ;
setAttr "lambert2.color" -type double3 0.207727 0.551 0.22417 ;
select -r Particle8 ;
select -r Particle9 ;
select -tgl Particle1 ;
shadingNode -asShader lambert;
// Result: lambert3 // 
sets -renderable true -noSurfaceShader true -empty -name lambert3SG;
// Result: lambert3SG // 
connectAttr -f lambert3.outColor lambert3SG.surfaceShader;
// Result: Connected lambert3.outColor to lambert3SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert3 "Particle9 Particle1";
sets -e -forceElement lambert3SG;
// Result: lambert3SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert3.color" -type double3 0.5 0.5 0.5 ;
setAttr "lambert3.color" -type double3 0.1345 0.178269 0.5 ;
setAttr "lambert3.color" -type double3 0.22058 0.292361 0.82 ;
select -r Particle7 ;
select -r Particle8 ;
select -tgl Particle2 ;
shadingNode -asShader lambert;
// Result: lambert4 // 
sets -renderable true -noSurfaceShader true -empty -name lambert4SG;
// Result: lambert4SG // 
connectAttr -f lambert4.outColor lambert4SG.surfaceShader;
// Result: Connected lambert4.outColor to lambert4SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert4 "Particle8 Particle2";
sets -e -forceElement lambert4SG;
// Result: lambert4SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert4.color" -type double3 0.5 0.5 0.5 ;
setAttr "lambert4.color" -type double3 0.480551 0.036 0.5 ;
select -r Particle3 ;
select -tgl Particle7 ;
shadingNode -asShader lambert;
// Result: lambert5 // 
sets -renderable true -noSurfaceShader true -empty -name lambert5SG;
// Result: lambert5SG // 
connectAttr -f lambert5.outColor lambert5SG.surfaceShader;
// Result: Connected lambert5.outColor to lambert5SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert5 "Particle3 Particle7";
sets -e -forceElement lambert5SG;
// Result: lambert5SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert5.color" -type double3 0.5 0.054 0.054 ;
select -r Particle4 ;
select -tgl Particle6 ;
shadingNode -asShader lambert;
// Result: lambert6 // 
sets -renderable true -noSurfaceShader true -empty -name lambert6SG;
// Result: lambert6SG // 
connectAttr -f lambert6.outColor lambert6SG.surfaceShader;
// Result: Connected lambert6.outColor to lambert6SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert6 "Particle4 Particle6";
sets -e -forceElement lambert6SG;
// Result: lambert6SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert5.color" -type double3 0.5 0.5 0.5 ;
setAttr "lambert6.color" -type double3 0.5 0.380391 0.075 ;
setAttr "lambert6.color" -type double3 0.838 0.637535 0.1257 ;
setAttr "lambert6.color" -type double3 0.838 0.535166 0.1257 ;
setAttr "lambert6.color" -type double3 0.713 0.455338 0.10695 ;
setAttr "lambert6.color" -type double3 0.713 0.435331 0.059892 ;
select -cl  ;
select -r Particle5 ;
shadingNode -asShader lambert;
// Result: lambert7 // 
sets -renderable true -noSurfaceShader true -empty -name lambert7SG;
// Result: lambert7SG // 
connectAttr -f lambert7.outColor lambert7SG.surfaceShader;
// Result: Connected lambert7.outColor to lambert7SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert7 "Particle5";
sets -e -forceElement lambert7SG;
// Result: lambert7SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert7.color" -type double3 0.5 0.5 0.5 ;
setAttr "lambert7.color" -type double3 0.46341 0.5 0.03 ;
setAttr "lambert7.color" -type double3 0.771115 0.832 0.04992 ;
select -r Particle7 ;
select -tgl Particle3 ;
shadingNode -asShader lambert;
// Result: lambert8 // 
sets -renderable true -noSurfaceShader true -empty -name lambert8SG;
// Result: lambert8SG // 
connectAttr -f lambert8.outColor lambert8SG.surfaceShader;
// Result: Connected lambert8.outColor to lambert8SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert8 "Particle7 Particle3";
sets -e -forceElement lambert8SG;
// Result: lambert8SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert8.color" -type double3 0.5 0.015 0.015 ;
setAttr "lambert8.color" -type double3 0.874 0.02622 0.02622 ;
select -cl  ;
select -r Bar0 Bar1 Bar2 Bar3 Bar4 Bar5 Bar6 Bar7 Bar8 Bar9 Bar10 ;
shadingNode -asShader lambert;
// Result: lambert9 // 
sets -renderable true -noSurfaceShader true -empty -name lambert9SG;
// Result: lambert9SG // 
connectAttr -f lambert9.outColor lambert9SG.surfaceShader;
// Result: Connected lambert9.outColor to lambert9SG.surfaceShader. // 
assignCreatedShader "lambert" "" lambert9 "Bar0 Bar1 Bar2 Bar3 Bar4 Bar5 Bar6 Bar7 Bar8 Bar9 Bar10";
sets -e -forceElement lambert9SG;
// Result: lambert9SG // 
// Created shader lambert and assigned to the selected objects. //
setAttr "lambert9.color" -type double3 0.084 0.084 0.084 ;
select -cl  ;



}


